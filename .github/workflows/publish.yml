name: Create Release and Publish

on:
  pull_request:
    types: [closed]
    branches:
      - main

  workflow_dispatch:
    inputs:
      major:
        description: 'Bump major version'
        required: false
        default: 'false'
      minor:
        description: 'Bump minor version'
        required: false
        default: 'false'

jobs:
  release:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: read
    outputs:
      new_version: ${{ env.NEW_VERSION }}
      new_version_no_v: ${{ env.NEW_VERSION_NO_V }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.PAT_TOKEN  }}

      - name: Get latest tag
        id: get_latest_tag
        run: |
          latest_tag=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "LATEST_TAG=$latest_tag" >> $GITHUB_ENV

      - name: Determine version bump
        id: bump_version
        run: |
          BUMP_TYPE="patch"
          
          if [[ "${{ contains(github.event.pull_request.labels.*.name, 'major') }}" == "true" ]]; then
            BUMP_TYPE="major"
          elif [[ "${{ contains(github.event.pull_request.labels.*.name, 'minor') }}" == "true" ]]; then
            BUMP_TYPE="minor"
          fi
          
          current_version=${LATEST_TAG#v}
          IFS='.' read -r major minor patch <<< "$current_version"
          
          case $BUMP_TYPE in
            major)
              new_version="$((major + 1)).0.0"
              ;;
            minor)
              new_version="${major}.$((minor + 1)).0"
              ;;
            patch)
              new_version="${major}.${minor}.$((patch + 1))"
              ;;
          esac
          
          echo "NEW_VERSION=v${new_version}" >> $GITHUB_ENV
          echo "NEW_VERSION_NO_V=${new_version}" >> $GITHUB_ENV

      - name: Update pyproject.toml version
        run: |
          # Use sed to update the version in pyproject.toml
          sed -i "s/version = \".*\"/version = \"${{ env.NEW_VERSION_NO_V }}\"/" pyproject.toml
          
      - name: Generate changelog
        id: changelog
        run: |
          CHANGELOG=$(git log ${LATEST_TAG}..HEAD --pretty=format:"* %s (%h)" --no-merges)
          echo "CHANGELOG<<EOF" >> $GITHUB_ENV
          echo "$CHANGELOG" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Commit version update
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add pyproject.toml
          git commit -m "chore: bump version to ${{ env.NEW_VERSION }}"
          git push

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.NEW_VERSION }}
          name: Release ${{ env.NEW_VERSION }}
          body: |
            ## Changes
            ${{ env.CHANGELOG }}
            
            ## Pull Request
            #${{ github.event.pull_request.number }} ${{ github.event.pull_request.title }}
          draft: false
          prerelease: false
          token: ${{ secrets.GITHUB_TOKEN }}
          make_latest: true
          generate_release_notes: false


  test:
    needs: [release] 
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.12"]
    steps:
    - uses: actions/checkout@v4
      with:
        ref: main  
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: pip
        cache-dependency-path: pyproject.toml
    
    - name: Install dependencies
      run: |
        pip install uv
        uv sync --extra dev-dependencies
    - name: Run tests
      run: |
        source .venv/bin/activate
        python -m pytest
  
  build:
    runs-on: ubuntu-latest
    needs: [test, release]  
    steps:
    - uses: actions/checkout@v4
      with:
        ref: main  
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.12"
        cache: pip
        cache-dependency-path: pyproject.toml
    - name: Install dependencies
      run: |
        pip install uv
        uv sync
    - name: Build
      run: |
        source .venv/bin/activate
        uv build
    - name: Store the distribution packages
      uses: actions/upload-artifact@v4
      with:
        name: python-packages
        path: dist/

  publish:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: [build, release]  
    environment: release
    permissions:
      id-token: write
    steps:
    - name: Download distribution packages
      uses: actions/download-artifact@v4
      with:
        name: python-packages
        path: dist/
    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1

